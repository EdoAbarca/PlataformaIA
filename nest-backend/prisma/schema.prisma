// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AI {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  key     Key[]
  results Result[]

  @@map("ais")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]

  @@map("roles")
}

model Institution {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  analysis Analysis[]

  @@map("institutions")
}

model Semester {
  id       Int        @id @default(autoincrement())
  code     String     @unique
  analysis Analysis[]

  @@map("semesters")
}

model Faculty {
  id       Int        @id @default(autoincrement())
  name     String     
  analysis Analysis[]

  @@map("faculties")
}

model Subject {
  id       Int        @id @default(autoincrement())
  name     String     
  analysis Analysis[]

  @@map("subjects")
}

model Key {
  id      Int    @id @default(autoincrement())
  ai_key  String 
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int    
  ai      AI     @relation(fields: [ai_id], references: [id], onDelete: Cascade)
  ai_id   Int    

  @@map("keys")
}

model Document {
  id      Int      @id @default(autoincrement())
  title   String
  results Result[]

  //file File
  @@map("documents")
}

model User {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now())

  email String @unique

  username String

  password String @unique

  role    Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id Int  

  analysis Analysis[]
  key      Key[]

  @@map("users")
}

model Analysis {
  id             Int         @id @default(autoincrement())
  created        DateTime    @default(now())
  title          String
  user           User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id        Int         
  institution    Institution @relation(fields: [institution_id], references: [id], onDelete: Cascade)
  institution_id Int         
  subject        Subject     @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  subject_id     Int         
  semester       Semester    @relation(fields: [semester_id], references: [id], onDelete: Cascade)
  semester_id    Int
  faculty        Faculty     @relation(fields: [faculty_id], references: [id], onDelete: Cascade)
  faculty_id     Int         
  results        Result[]

  @@map("analysis")
}

model Result {
  id          Int      @id @default(autoincrement())
  created     DateTime @default(now())
  ia_score    Int
  ia_result   String
  //file File
  analysis    Analysis @relation(fields: [analysis_id], references: [id], onDelete: Cascade)
  analysis_id Int      
  ai          AI       @relation(fields: [ai_id], references: [id], onDelete: Cascade)
  ai_id       Int      
  document    Document @relation(fields: [document_id], references: [id], onDelete: Cascade)
  document_id Int      

  @@map("results")
}
